{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d21759ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the databse `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the 'id' of the data\n      db.createObjectStore('products', { keyPath: '_id'});\n      db.createObjectStore('categories', { keyPath: '_id'});\n      db.createObjectStore('cart', {keyPath: '_id'});\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('there was an error');\n    }\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the 'db' variable\n      db = request.result;\n      // open a transaction do whatever we pass into 'store name' (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if theres any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result)\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;      \n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      }\n    }\n  })\n}","import { useReducer } from 'react';\r\n\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\";\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        // if action type value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n\r\n            // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n            case UPDATE_CATEGORIES:\r\n                return {\r\n                    ...state,\r\n                    categories: [...action.categories]\r\n                };\r\n\r\n                case UPDATE_CURRENT_CATEGORY:\r\n                    return {\r\n                        ...state,\r\n                        currentCategory: action.currentCategory\r\n                    };\r\n\r\n                    case ADD_TO_CART:\r\n                        return {\r\n                            ...state,\r\n                            cartOpen: true,\r\n                            cart: [...state.cart, action.product]\r\n                        }\r\n\r\n                        case ADD_MULTIPLE_TO_CART:\r\n                            return {\r\n                                ...state,\r\n                                cart: [...state.cart, ...action.products],\r\n                            }\r\n\r\n                            case REMOVE_FROM_CART:\r\n                                let newState = state.cart.filter(product => {\r\n                                    return product._id !== action._id;\r\n                                });\r\n\r\n                                return{\r\n                                    ...state,\r\n                                    cartOpen: newState.length > 0,\r\n                                    cart: newState\r\n                                }\r\n\r\n                                case UPDATE_CART_QUANTITY: \r\n                                return {\r\n                                    ...state,\r\n                                    cartOpen: true,\r\n                                    cart: state.cart.map(product => {\r\n                                        if (action._id === product._id) {\r\n                                            product.purchaseQuantity = action.purchaseQuantity;\r\n                                        }\r\n                                        return product\r\n                                    })\r\n                                }\r\n\r\n                                case CLEAR_CART:\r\n                                    return {\r\n                                        ...state,\r\n                                        cartOpen: false,\r\n                                        cart: []\r\n                                    };\r\n\r\n                                    case TOGGLE_CART:\r\n                                        return {\r\n                                            ...state,\r\n                                            cartOpen: !state.cartOpen\r\n                                        };\r\n\r\n\r\n            // if it's none of these actions, do not update state at all and keep things the same!\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n\r\n    return useReducer(reducer, initialState);\r\n\r\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\n\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { useProductReducer } from \"./reducers\";\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: '',\r\n    });\r\n\r\n    // use this to confirm it works!\r\n    console.log(state);\r\n    return <Provider value={[state, dispatch]} {...props} />;\r\n}\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions'\n\nimport { idbPromise } from '../../utils/helpers';\n\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      })\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 })\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  } \n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\nconst [state, dispatch] = useStoreContext();\n\nconst { currentCategory } = state;\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\nuseEffect(() => {\n  // if there's data to be stored\n  if (data) {\n    // let's store it in the global state object\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n\n    // but let's also take each product and save it to indexedDB using the helper function\n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n    });\n    // add else if to check if loading is undefined in useQuery() Hook\n  } else if (!loading) {\n    // since were offline, get all of the data from the products store\n    idbPromise('products', 'get').then((products) => {\n      // use retrieved data to set global state for offline browsing\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      })\n    })\n  }\n}, [data, loading, dispatch]);\n\nfunction filterProducts() {\n  if (!currentCategory) {\n    return state.products;\n  }\n\n  return state.products.filter(product => product.category._id === currentCategory);\n}\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\n\nimport { idbPromise } from '../../utils/helpers'\n\nfunction CategoryMenu() {\n\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exist or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to \n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch]);\n\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react'\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\n\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\n\r\nconst CartItem = ({ item }) => {\r\n    const [, dispatch] = useStoreContext();\r\n\r\n    const removeFromCart = item => {\r\n        dispatch({\r\n            type: REMOVE_FROM_CART,\r\n            _id: item._id\r\n        });\r\n        idbPromise('cart', 'delete', { ...item})\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n\r\n        if (value  === '0') {\r\n            dispatch({\r\n                type: REMOVE_FROM_CART,\r\n                _id: item._id\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: UPDATE_CART_QUANTITY,\r\n                _id: item._id,\r\n                purchaseQuantity: parseInt(value)\r\n            });\r\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n        }\r\n    }\r\n    return (\r\n        <div className='flex-row'>\r\n            <div>\r\n                <img\r\n                src={`/images/${item.image}`}\r\n                alt=\"\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <div>{item.name}, ${item.price}</div>\r\n                <div>\r\n                    <span>Qty:</span>\r\n                    <input\r\n                        type='number'\r\n                        placeholder='1'\r\n                        value={item.purchaseQuantity}\r\n                        onChange={onChange}\r\n                     />\r\n                     <span\r\n                     role='img'\r\n                     aria-label='trash'\r\n                     onClick={() => removeFromCart(item)}\r\n                     > 🗑️</span>   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartItem","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { useLazyQuery } from '@apollo/client';\r\n\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js'\r\n\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\n\r\n\r\nconst Cart = () => {\r\n\r\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n    const [state, dispatch] = useStoreContext();\r\n\r\n    useEffect(() => {\r\n        async function getCart() {\r\n            const cart = await idbPromise('cart', 'get');\r\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n        };\r\n\r\n        if (!state.cart.length) {\r\n            getCart();\r\n        }\r\n    }, [state.cart.length, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n          stripePromise.then((res) => {\r\n            res.redirectToCheckout({ sessionId: data.checkout.session });\r\n          });\r\n        }\r\n      }, [data]);\r\n\r\n    function toggleCart() {\r\n        dispatch({ type: TOGGLE_CART });\r\n    }\r\n\r\n    if (!state.cartOpen) {\r\n        return (\r\n            <div className='cart-closed' onClick={toggleCart}>\r\n                <span\r\n                role='img'\r\n                aria-label='trash'>🛒</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function calculateTotal() {\r\n        let sum = 0;\r\n        state.cart.forEach(item => {\r\n            sum += item.price * item.purchaseQuantity;\r\n        });\r\n        return sum.toFixed(2)\r\n    }\r\n\r\n    function submitCheckout() {\r\n        const productIds = [];\r\n\r\n        state.cart.forEach((item) => {\r\n            for (let i = 0; i < item.purchaseQuantity; i++) {\r\n                productIds.push(item._id);\r\n            }\r\n        });\r\n\r\n        getCheckout({\r\n            variables: { products: productIds }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='cart'>\r\n            <div className='close' onClick={toggleCart}>[close]</div>\r\n            <h2>Shopping Cart</h2>\r\n            {state.cart.length ? (\r\n                <div>\r\n                    {state.cart.map(item => (\r\n                        <CartItem key={item._id} item={item} />\r\n                    ))}\r\n                    <div className='flex-row space-between'>\r\n                        <strong>Total: ${calculateTotal()}</strong>\r\n                        {\r\n                            Auth.loggedIn() ?\r\n                            <button onClick={submitCheckout}>\r\n                                Checkout\r\n                            </button>\r\n                            :\r\n                            <span>(log in to check out)</span>\r\n                        }\r\n                    </div>\r\n                    </div>\r\n\r\n            ) : (\r\n                <h3>\r\n                    <span role='img' aria-label='shocked'>😱</span>\r\n                    You havent added anything to your cart yet!\r\n                </h3>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_PRODUCTS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART }  from '../utils/actions';\n\nimport Cart from '../components/Cart'\n\nimport { idbPromise } from '../utils/helpers';\n\nfunction Detail() {\n  \n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    // upon removal from cart, delete the item from IndexedDB using the 'currentProduct._id' to locate what to remove. \n    idbPromise('cart', 'delete', { ...currentProduct })\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('promise', 'put', product)\n      });\n    }\n\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        })\n      })\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n   const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n   if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n\n  // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n  idbPromise('cart', 'put', {\n    ...itemInCart,\n    purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n  })\n   } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n    // if product isnt in the cart yet, add it to the current shopping cart in IndexedDB\n    idbPromise('cart', 'put',  { ...currentProduct, purchaseQuantity: 1 })\n   }\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}\n            >\n              Remove from Cart\n              </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n  \r\n    useEffect(() => {\r\n      async function saveOrder() {\r\n        const cart = await idbPromise('cart', 'get');\r\n        const products = cart.map((item) => item._id);\r\n  \r\n        if (products.length) {\r\n          const { data } = await addOrder({ variables: { products } });\r\n          const productData = data.addOrder.products;\r\n  \r\n          productData.forEach((item) => {\r\n            idbPromise('cart', 'delete', item);\r\n          });\r\n        }\r\n  \r\n        setTimeout(() => {\r\n          window.location.assign('/');\r\n        }, 3000);\r\n      }\r\n  \r\n      saveOrder();\r\n    }, [addOrder]);\r\n  \r\n    return (\r\n      <div>\r\n        <Jumbotron>\r\n          <h1>Success!</h1>\r\n          <h2>Thank you for your purchase!</h2>\r\n          <h2>You will now be redirected to the home page</h2>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Success;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route path=\"/success\" element={<Success />} />\n            <Route component={NoMatch} />\n          </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}